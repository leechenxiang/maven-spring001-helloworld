<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd">
           
	<!-- 把一个类放入到spring容器中，该类就称为bean -->
	<!-- 描述一个类 id 唯一标示 class 类名 -->
	<bean id="helloWorld" class="com.lee.spring001.createobject.HelloWorld"></bean>

	<!-- factory-method 是指调用静态工厂方法 -->
	<bean id="helloWorld2" class="com.lee.spring002.createobject.method.HelloWorldFactory"
		factory-method="getInstance"></bean>

	<!-- 实例工厂 -->
	<bean id="helloWorldFactory"
		class="com.lee.spring002.createobject.method.HelloWorldFactory2"></bean>
	<!-- factory-bean 是一个工厂bean -->
	<bean id="helloWorld3" factory-bean="helloWorldFactory"
		factory-method="getInstance"></bean>

	<!-- 别名 name 属性值要和 id 一致 -->
	<alias name="helloWorld3" alias="abc" />
	<alias name="helloWorld3" alias="测试" />

	<bean id="whenFactory" class="com.lee.spring004.createobject.when.WhenFactory"></bean>
	<bean id="when" factory-bean="whenFactory" factory-method="getInstance"></bean>

	<bean id="when2" class="com.lee.spring004.createobject.when.When"
		lazy-init="true"></bean>


	<bean id="scope" class="com.lee.spring005.scope.Scope"></bean>

	<!-- singleton: 默认单例 prototype: 多例 request ，session和global session: 只适用于web程序 -->
	<bean id="scope_prototype" class="com.lee.spring005.scope.Scope"
		scope="prototype"></bean>

	<!-- destroy-method 一般在数据源的时候用到，关闭容易后就销毁连接 -->
	<bean id="initDestory" class="com.lee.spring006.init_destory.InitDestory"
		init-method="init" destroy-method="destory"></bean>

	<!-- 依赖注入的装配过程 -->
	<bean id="person" class="com.lee.spring007.di.xml.setter.Person">
		<property name="pid" value="1001"></property>

		<property name="name" value="nathan"></property>

		<property name="stu" ref="student"></property>

		<property name="list">
			<list>
				<value>a</value>
				<value>b</value>
				<value>c</value>
				<value>d</value>
				<value>e</value>
			</list>
		</property>

		<property name="map">
			<map>
				<entry key="number" value="111"></entry>
				<entry key="bean" value-ref="student"></entry>
			</map>
		</property>

		<property name="properties">
			<props>
				<prop key="one">111</prop>
				<prop key="two">222</prop>
				<prop key="three">333</prop>
			</props>
		</property>

		<property name="sets">
			<set>
				<value>11</value>
				<ref bean="student" />
			</set>
		</property>

		<property name="obj">
			<list>
				<value>a</value>
				<value>b</value>
				<value>c</value>
				<value>d</value>
				<value>e</value>
			</list>
		</property>

	</bean>
	<bean id="student" class="com.lee.spring007.di.xml.setter.Student"></bean>


	<bean id="docManger" class="com.lee.spring008.IOC.DI.meaning.DocManger">
		<!-- 这个属性是接口 -->
		<property name="doc" ref="word"></property>
	</bean>
	<bean id="word" class="com.lee.spring008.IOC.DI.meaning.Word"></bean>
	<bean id="excel" class="com.lee.spring008.IOC.DI.meaning.Excel"></bean>
	<bean id="pdf" class="com.lee.spring008.IOC.DI.meaning.Pdf"></bean>

	<bean id="personAction" class="com.lee.spring008.IOC.DI.MVC.PersonAction">
		<property name="stuService" ref="stuService"></property>
	</bean>
	<bean id="stuService" class="com.lee.spring008.IOC.DI.MVC.StuServiceImpl">
		<property name="stuDAO" ref="stuDAO"></property>
	</bean>
	<bean id="stuDAO" class="com.lee.spring008.IOC.DI.MVC.StuDAOImpl"></bean>

	<!-- 
		实现spring的继承
	 -->
	<bean id="personExtend" class="com.lee.spring009.extend.Person">
		<property name="name" value="nathan.lee"></property>
	</bean>
	<bean id="studentExtend" class="com.lee.spring009.extend.Student" parent="personExtend"></bean>
	<!-- 子类继承父类，直接赋值 -->
	<bean id="studentExtend2" class="com.lee.spring009.extend.Student" parent="personExtend">
		<property name="name" value="abc"></property>
	</bean>


	<!-- 
		spring annotation
	 -->
	 <bean id="personA" class="com.lee.spring010.DI.annotation.Person"></bean>
	 <bean id="studentA" class="com.lee.spring010.DI.annotation.Student"></bean>
	 
	<!-- 
   		启动依赖注入的注解解析器
    -->
	<context:annotation-config></context:annotation-config>
	    
</beans>